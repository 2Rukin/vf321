import com.querydsl.core.types.Path;
import com.querydsl.core.types.dsl.*;
import com.querydsl.jpa.JPQLQuery;

import java.util.List;

/**
 * Сервис для управления соединениями (джоинами) в QueryDSL.
 */
public class QJoinService {

    /**
     * Класс, описывающий параметры соединения.
     *
     * @param path     Путь к ассоциированному объекту (может быть CollectionPath, EntityPath и т.д.).
     * @param alias    Алиас для соединения.
     * @param joinType Тип соединения (LEFT, RIGHT, INNER).
     * @param <C>      Тип коллекции или сущности.
     * @param <P>      Тип целевой сущности.
     */
    public record JoinDescription<C, P>(
        Path<C> path,
        Path<P> alias,
        JoinType joinType
    ) {}

    /**
     * Применяет соединения (джоины) к запросу.
     *
     * @param query            Запрос QueryDSL, к которому нужно добавить соединения.
     * @param joinDescriptions Список описаний соединений.
     * @param <T>              Тип результата запроса.
     * @return Модифицированный запрос с добавленными соединениями.
     */
    public <T> JPQLQuery<T> applyJoins(JPQLQuery<T> query, List<JoinDescription<?, ?>> joinDescriptions) {
        for (JoinDescription<?, ?> joinDescription : joinDescriptions) {
            applyJoin(query, joinDescription);
        }
        return query;
    }

    /**
     * Универсальный метод для применения соединения на основе описания.
     *
     * @param query           Запрос QueryDSL.
     * @param joinDescription Описание соединения.
     * @param <T>             Тип результата запроса.
     * @param <C>             Тип коллекции или сущности.
     * @param <P>             Тип целевой сущности.
     */
    private <T, C, P> void applyJoin(JPQLQuery<T> query, JoinDescription<C, P> joinDescription) {
        Path<C> path = joinDescription.path();
        Path<P> alias = joinDescription.alias();
        JoinType joinType = joinDescription.joinType();

        // Определяем тип соединения в зависимости от пути
        if (path instanceof CollectionExpression<?, ?>) {
            applyCollectionJoin(query, (CollectionExpression<?, P>) path, alias, joinType);
        } else if (path instanceof EntityPath<?>) {
            applyEntityJoin(query, (EntityPath<P>) path, alias, joinType);
        } else {
            throw new IllegalArgumentException("Unsupported path type: " + path.getClass().getName());
        }
    }

    /**
     * Применяет соединение для коллекций (например, `CollectionExpression`).
     */
    private <T, P> void applyCollectionJoin(JPQLQuery<T> query, CollectionExpression<?, P> path, Path<P> alias, JoinType joinType) {
        switch (joinType) {
            case LEFT -> query.leftJoin(path, alias);
            case RIGHT -> query.rightJoin(path, alias);
            case INNER -> query.join(path, alias);
            default -> throw new IllegalArgumentException("Unsupported join type: " + joinType);
        }
    }

    /**
     * Применяет соединение для сущностей (`EntityPath`).
     */
    private <T, P> void applyEntityJoin(JPQLQuery<T> query, EntityPath<P> path, Path<P> alias, JoinType joinType) {
        switch (joinType) {
            case LEFT -> query.leftJoin(path, alias);
            case RIGHT -> query.rightJoin(path, alias);
            case INNER -> query.join(path, alias);
            default -> throw new IllegalArgumentException("Unsupported join type: " + joinType);
        }
    }

    /**
 * Создаёт карту соединений для использования в QueryDSL.
 *
 * @param root  Корневой путь (например, главная сущность запроса).
 * @param joins Список описаний соединений.
 * @param <C>   Тип пути корневой сущности.
 * @param <P>   Тип целевых сущностей в соединениях.
 * @return Карта соединений, где ключи — пути, а значения — описания соединений.
 */
public <C, P> Map<Path<? extends C>, QJoinService.JoinDescription<C, P>> createJoinMap(
    Path<C> root,
    List<QJoinService.JoinDescription<C, P>> joins
) {
    Map<Path<? extends C>, QJoinService.JoinDescription<C, P>> joinMap = new HashMap<>();
    joins.forEach(join -> joinMap.put(join.path(), join));
    return joinMap;
}
}
