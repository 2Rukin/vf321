import static org.junit.jupiter.api.Assertions.*;

import java.util.*;
import java.util.stream.Stream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.*;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class SearchUtilsTest {

    private UUID clientId;
    private UUID orgId1;
    private UUID orgId2;
    private String right;

    @BeforeEach
    void setUp() {
        clientId = UUID.randomUUID();
        orgId1 = UUID.randomUUID();
        orgId2 = UUID.randomUUID();
        right = "VIEW_REPORTS";
    }

    // Параметризованные тесты для findOrganizationIdByClientId

    static Stream<Arguments> findOrganizationIdByClientIdTestCases() {
        UUID clientId = UUID.randomUUID();
        UUID orgId1 = UUID.randomUUID();

        // Создание ролей с использованием UserInfoTestDataWW
        RoleScope matchingRole = UserInfoTestDataWW.createRoleScope(clientId, Arrays.asList("RIGHT1"));
        RoleScope nonMatchingRole = UserInfoTestDataWW.createRoleScope(orgId1, Arrays.asList("RIGHT2"));
        RoleScope nullOrganizationIdRole = UserInfoTestDataWW.createRoleScope(null, Arrays.asList("RIGHT3"));

        // Создание UserInfo с различными ролями
        UserInfo userWithNullRoles = UserInfoTestDataWW.getBaseUserInfo();
        userWithNullRoles.setRoles(null);

        UserInfo userWithEmptyRoles = UserInfoTestDataWW.createUserInfoWithRoles(Collections.emptyList());

        UserInfo userWithMatchingRole = UserInfoTestDataWW.createUserInfoWithRoles(Arrays.asList(matchingRole));

        UserInfo userWithNonMatchingRoles = UserInfoTestDataWW.createUserInfoWithRoles(Arrays.asList(nonMatchingRole));

        UserInfo userWithNullOrganizationIdRole = UserInfoTestDataWW.createUserInfoWithRoles(Arrays.asList(nullOrganizationIdRole, matchingRole));

        return Stream.of(
                Arguments.of("clientId равен null", null, userWithMatchingRole, NullPointerException.class, null),
                Arguments.of("userInfo равен null", clientId, null, NullPointerException.class, null),
                Arguments.of("Роли пользователя равны null", clientId, userWithNullRoles, AccessDeniedException.class, "Неожиданно роли пользователя NULL. clientId: " + clientId),
                Arguments.of("Роли пользователя пусты", clientId, userWithEmptyRoles, AccessDeniedException.class, "Неожиданно роли пользователя NULL. clientId: " + clientId),
                Arguments.of("Есть роль с соответствующим clientId", clientId, userWithMatchingRole, null, clientId),
                Arguments.of("Нет роли с соответствующим clientId", clientId, userWithNonMatchingRoles, RoleNotFoundException.class, "Не найдена роль где organizationId=clientId. clientId: " + clientId),
                Arguments.of("Роль с null в organizationId игнорируется", clientId, userWithNullOrganizationIdRole, null, clientId)
        );
    }

    @ParameterizedTest(name = "{0}")
    @MethodSource("findOrganizationIdByClientIdTestCases")
    void testFindOrganizationIdByClientId(String testName, UUID clientId, UserInfo userInfo, Class<? extends Exception> expectedException, Object expectedResult) {
        if (expectedException != null) {
            Exception exception = assertThrows(expectedException, () ->
                    SearchUtils.findOrganizationIdByClientId(clientId, userInfo)
            );
            if (expectedResult != null && exception.getMessage() != null) {
                assertEquals(expectedResult, exception.getMessage());
            }
        } else {
            UUID result = SearchUtils.findOrganizationIdByClientId(clientId, userInfo);
            assertEquals(expectedResult, result);
        }
    }

    // Параметризованные тесты для findAllOrganizationIdsWithRight

    static Stream<Arguments> findAllOrganizationIdsWithRightTestCases() {
        String right = "VIEW_REPORTS";
        UUID orgId1 = UUID.randomUUID();
        UUID orgId2 = UUID.randomUUID();

        // Создание ролей с использованием UserInfoTestDataWW
        RoleScope roleWithRight1 = UserInfoTestDataWW.createRoleScope(orgId1, Arrays.asList(right, "EDIT_DATA"));
        RoleScope roleWithRight2 = UserInfoTestDataWW.createRoleScope(orgId2, Arrays.asList(right));
        RoleScope roleWithoutRight = UserInfoTestDataWW.createRoleScope(UUID.randomUUID(), Arrays.asList("EDIT_DATA"));
        RoleScope roleWithNullRights = UserInfoTestDataWW.createRoleScope(UUID.randomUUID(), null);
        RoleScope roleWithNullOrganizationId = UserInfoTestDataWW.createRoleScope(null, Arrays.asList(right));

        // Создание UserInfo с различными ролями
        UserInfo userWithNullRoles = UserInfoTestDataWW.getBaseUserInfo();
        userWithNullRoles.setRoles(null);

        UserInfo userWithEmptyRoles = UserInfoTestDataWW.createUserInfoWithRoles(Collections.emptyList());

        UserInfo userWithRolesHavingRights = UserInfoTestDataWW.createUserInfoWithRoles(Arrays.asList(roleWithRight1, roleWithRight2, roleWithoutRight));

        UserInfo userWithNoRolesHavingRight = UserInfoTestDataWW.createUserInfoWithRoles(Arrays.asList(roleWithoutRight));

        UserInfo userWithRolesHavingNullRights = UserInfoTestDataWW.createUserInfoWithRoles(Arrays.asList(roleWithNullRights, roleWithRight1));

        UserInfo userWithRolesHavingNullOrganizationId = UserInfoTestDataWW.createUserInfoWithRoles(Arrays.asList(roleWithNullOrganizationId, roleWithRight1));

        return Stream.of(
                Arguments.of("userInfo равен null", null, right, NullPointerException.class, null),
                Arguments.of("right равен null", userWithRolesHavingRights, null, NullPointerException.class, null),
                Arguments.of("Роли пользователя равны null", userWithNullRoles, right, AccessDeniedException.class, "Неожиданно роли пользователя NULL. UserInfo: " + userWithNullRoles),
                Arguments.of("Роли пользователя пусты", userWithEmptyRoles, right, AccessDeniedException.class, "Неожиданно роли пользователя NULL. UserInfo: " + userWithEmptyRoles),
                Arguments.of("Есть роли с указанным правом", userWithRolesHavingRights, right, null, new HashSet<>(Arrays.asList(orgId1, orgId2))),
                Arguments.of("Нет ролей с указанным правом", userWithNoRolesHavingRight, right, AccessDeniedException.class, "Не найдены организации с правом: " + right),
                Arguments.of("Роли с null в rights игнорируются", userWithRolesHavingNullRights, right, null, new HashSet<>(Arrays.asList(orgId1))),
                Arguments.of("Роли с null в organizationId игнорируются", userWithRolesHavingNullOrganizationId, right, null, new HashSet<>(Arrays.asList(orgId1)))
        );
    }

    @ParameterizedTest(name = "{0}")
    @MethodSource("findAllOrganizationIdsWithRightTestCases")
    void testFindAllOrganizationIdsWithRight(String testName, UserInfo userInfo, String right, Class<? extends Exception> expectedException, Object expectedResult) {
        if (expectedException != null) {
            Exception exception = assertThrows(expectedException, () ->
                    SearchUtils.findAllOrganizationIdsWithRight(userInfo, right)
            );
            if (expectedResult != null && exception.getMessage() != null) {
                assertEquals(expectedResult, exception.getMessage());
            }
        } else {
            Set<UUID> result = SearchUtils.findAllOrganizationIdsWithRight(userInfo, right);
            assertEquals(expectedResult, result);
        }
    }
}
??????????????????????????????????????????




import lombok.experimental.UtilityClass;

import java.time.ZonedDateTime;
import java.util.List;
import java.util.UUID;

@UtilityClass
public class UserInfoTestDataWW {

    public static UserInfo getBaseUserInfo() {
        UserInfo userInfo = new UserInfo();
        userInfo.setCurrentSession(new CurrentSession(UUID.randomUUID().toString(), null, ZonedDateTime.now()));
        userInfo.setIndividualId(UUID.randomUUID().toString());
        userInfo.setLogin("testLogin");
        userInfo.setUserId(UUID.randomUUID().toString());
        return userInfo;
    }

    public static RoleScope getUserInfoRole() {
        RoleScope role = new RoleScope();
        role.setId(UUID.randomUUID());
        return role;
    }

    // Новый метод для создания RoleScope с заданными параметрами
    public static RoleScope createRoleScope(UUID organizationId, List<String> rights) {
        RoleScope role = new RoleScope();
        role.setId(UUID.randomUUID());
        role.setOrganizationId(organizationId);
        role.setRights(rights);
        return role;
    }

    // Новый метод для создания UserInfo с заданными ролями
    public static UserInfo createUserInfoWithRoles(List<RoleScope> roles) {
        UserInfo userInfo = getBaseUserInfo();
        userInfo.setRoles(roles);
        return userInfo;
    }
}
import lombok.experimental.UtilityClass;

import java.time.ZonedDateTime;
import java.util.List;
import java.util.UUID;

@UtilityClass
public class UserInfoTestDataWW {

    public static UserInfo getBaseUserInfo() {
        UserInfo userInfo = new UserInfo();
        userInfo.setCurrentSession(new CurrentSession(UUID.randomUUID().toString(), null, ZonedDateTime.now()));
        userInfo.setIndividualId(UUID.randomUUID().toString());
        userInfo.setLogin("testLogin");
        userInfo.setUserId(UUID.randomUUID().toString());
        return userInfo;
    }

    public static RoleScope getUserInfoRole() {
        RoleScope role = new RoleScope();
        role.setId(UUID.randomUUID());
        return role;
    }

    // Новый метод для создания RoleScope с заданными параметрами
    public static RoleScope createRoleScope(UUID organizationId, List<String> rights) {
        RoleScope role = new RoleScope();
        role.setId(UUID.randomUUID());
        role.setOrganizationId(organizationId);
        role.setRights(rights);
        return role;
    }

    // Новый метод для создания UserInfo с заданными ролями
    public static UserInfo createUserInfoWithRoles(List<RoleScope> roles) {
        UserInfo userInfo = getBaseUserInfo();
        userInfo.setRoles(roles);
        return userInfo;
    }
}
