@MockBean
private UserSessionService userSessionService;

@Test
void givenClientId_whenGetCount_thenStatus200AndValidResponse() throws Exception {
    // GIVEN
    final UUID clientId = UUID.fromString("b2ea73ea-f6bc-42ad-bfb2-a9afa306605e");

    when(userSessionService.getExtendedUserInfo(any(), any()))
        .thenReturn(getUserInfoTestData(clientId, PF_LOAN_FUNDS_REQUEST_VIEW));

    final String expectedJson = FileUtils.readFileUtf8("json/response/count-by-status.json");

    // WHEN / THEN
    mockMvc.perform(get(URL + PATH)
            .header(X_USER_INFO, ENCODED_X_USER_INFO))
        .andDo(print())
        .andExpect(status().isOk())
        .andExpect(content().json(expectedJson, true));
}

@Test
void whenClientIdNull_thenStatus200AndResponseForAllOrganizations() throws Exception {
    // GIVEN
    when(userSessionService.getExtendedUserInfo(any(), any()))
        .thenReturn(getUserInfoTestData(null, PF_LOAN_FUNDS_REQUEST_VIEW));

    final String expectedJson = FileUtils.readFileUtf8("json/response/count-for-all-orgs.json");

    // WHEN / THEN
    mockMvc.perform(get(URL + PATH)
            .header(X_USER_INFO, ENCODED_X_USER_INFO))
        .andDo(print())
        .andExpect(status().isOk())
        .andExpect(content().json(expectedJson, true));
}

@Test
void whenNoAccessToClientId_thenThrowsAccessDeniedException() throws Exception {
    // GIVEN
    final UUID clientId = UUID.fromString("b2ea73ea-f6bc-42ad-bfb2-a9afa306605e");

    when(userSessionService.getExtendedUserInfo(any(), any()))
        .thenReturn(getUserInfoTestDataWithoutAccess(clientId));

    // WHEN / THEN
    mockMvc.perform(get(URL + PATH)
            .header(X_USER_INFO, ENCODED_X_USER_INFO))
        .andDo(print())
        .andExpect(status().isForbidden());
}

@Test
void whenClientIdNotExists_thenThrowsNoSuchElementException() throws Exception {
    // GIVEN
    final UUID clientId = UUID.fromString("nonexistent-id");

    when(userSessionService.getExtendedUserInfo(any(), any()))
        .thenThrow(new NoSuchElementException("No role found for clientId"));

    // WHEN / THEN
    mockMvc.perform(get(URL + PATH)
            .header(X_USER_INFO, ENCODED_X_USER_INFO))
        .andDo(print())
        .andExpect(status().isNotFound());
}

@Test
void whenUserHasEmptyRoles_thenThrowsAccessDeniedException() throws Exception {
    // GIVEN
    when(userSessionService.getExtendedUserInfo(any(), any()))
        .thenReturn(getUserInfoWithEmptyRoles());

    // WHEN / THEN
    mockMvc.perform(get(URL + PATH)
            .header(X_USER_INFO, ENCODED_X_USER_INFO))
        .andDo(print())
        .andExpect(status().isForbidden());
}

@Test
void whenUserHasAccessToMultipleOrganizations_thenReturnsAggregatedResponse() throws Exception {
    // GIVEN
    when(userSessionService.getExtendedUserInfo(any(), any()))
        .thenReturn(getUserInfoWithMultipleOrgsAccess());

    final String expectedJson = FileUtils.readFileUtf8("json/response/aggregated-response.json");

    // WHEN / THEN
    mockMvc.perform(get(URL + PATH)
            .header(X_USER_INFO, ENCODED_X_USER_INFO))
        .andDo(print())
        .andExpect(status().isOk())
        .andExpect(content().json(expectedJson, true));
}

@Test
void whenNoBidsForOrganizations_thenReturnsEmptyResult() throws Exception {
    // GIVEN
    when(userSessionService.getExtendedUserInfo(any(), any()))
        .thenReturn(getUserInfoTestData(null, PF_LOAN_FUNDS_REQUEST_VIEW));

    final String expectedJson = FileUtils.readFileUtf8("json/response/empty-response.json");

    // WHEN / THEN
    mockMvc.perform(get(URL + PATH)
            .header(X_USER_INFO, ENCODED_X_USER_INFO))
        .andDo(print())
        .andExpect(status().isOk())
        .andExpect(content().json(expectedJson, true));
}

@Test
void whenUserHasNoRightsInRoles_thenThrowsAccessDeniedException() throws Exception {
    // GIVEN
    when(userSessionService.getExtendedUserInfo(any(), any()))
        .thenReturn(getUserInfoWithoutRights());

    // WHEN / THEN
    mockMvc.perform(get(URL + PATH)
            .header(X_USER_INFO, ENCODED_X_USER_INFO))
        .andDo(print())
        .andExpect(status().isForbidden());
}

@Test
void whenUserInfoIsNull_thenThrowsAccessDeniedException() throws Exception {
    // GIVEN
    when(userSessionService.getExtendedUserInfo(any(), any()))
        .thenReturn(null);

    // WHEN / THEN
    mockMvc.perform(get(URL + PATH)
            .header(X_USER_INFO, ENCODED_X_USER_INFO))
        .andDo(print())
        .andExpect(status().isForbidden());
}

@Test
void whenResponseMatchesExpectedJson_thenStatus200AndStrictMatching() throws Exception {
    // GIVEN
    final UUID clientId = UUID.fromString("b2ea73ea-f6bc-42ad-bfb2-a9afa306605e");

    when(userSessionService.getExtendedUserInfo(any(), any()))
        .thenReturn(getUserInfoTestData(clientId, PF_LOAN_FUNDS_REQUEST_VIEW));

    final String expectedJson = FileUtils.readFileUtf8("json/response/count-by-status.json");

    // WHEN / THEN
    mockMvc.perform(get(URL + PATH)
            .header(X_USER_INFO, ENCODED_X_USER_INFO))
        .andDo(print())
        .andExpect(status().isOk())
        .andExpect(content().json(expectedJson, true));
}
