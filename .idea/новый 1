public List<PaymentAnalyticDto> findPaymentAnalyticWithJoins() {
    CriteriaBuilder cb = entityManager.getCriteriaBuilder();
    CriteriaQuery<Tuple> query = cb.createTupleQuery();
    Root<PaymentAnalyticEntity> root = query.from(PaymentAnalyticEntity.class);

    // JOINs
    SetJoin<PaymentAnalyticEntity, PaymentObjectEntity> paymentObjectsJoin =
            root.join(PaymentAnalyticEntity_.paymentObjects, JoinType.LEFT);

    Join<PaymentObjectEntity, PaymentObjectSsrEntity> paymentObjectSsrJoin =
            paymentObjectsJoin.join(PaymentObjectEntity_.paymentObjectSsr, JoinType.LEFT);

    SetJoin<PaymentObjectSsrEntity, PaymentSsrArticleEntity> paymentSsrArticlesJoin =
            paymentObjectSsrJoin.join(PaymentObjectSsrEntity_.paymentSsrArticles, JoinType.LEFT);

    // Выборка полей
    query.multiselect(
            root.get(PaymentAnalyticEntity_.id).alias("id"),
            root.get(PaymentAnalyticEntity_.clientId).alias("clientId"),
            root.get(PaymentAnalyticEntity_.paymentDocumentId).alias("paymentDocumentId"),
            root.get(PaymentAnalyticEntity_.number).alias("number"),
            root.get(PaymentAnalyticEntity_.status).alias("status"),
            root.get(PaymentAnalyticEntity_.date).alias("date"),
            paymentObjectsJoin.get(PaymentObjectEntity_.name).alias("paymentObjectName"),
            paymentObjectsJoin.get(PaymentObjectEntity_.projectName).alias("paymentObjectProjectName"),
            paymentSsrArticlesJoin.get(PaymentSsrArticleEntity_.code).alias("articleCode")
    );

    List<Tuple> tuples = entityManager.createQuery(query).getResultList();

    // Маппинг результатов в DTO
    Map<UUID, PaymentAnalyticDto> analyticMap = new LinkedHashMap<>();

    for (Tuple tuple : tuples) {
        UUID id = tuple.get("id", UUID.class);

        // Верхний уровень
        PaymentAnalyticDto analyticDto = analyticMap.computeIfAbsent(id, k -> {
            PaymentAnalyticDto dto = new PaymentAnalyticDto();
            dto.setId(tuple.get("id", UUID.class));
            dto.setClientId(tuple.get("clientId", UUID.class));
            dto.setPaymentDocumentId(tuple.get("paymentDocumentId", UUID.class));
            dto.setNumber(tuple.get("number", Integer.class));
            dto.setStatus(tuple.get("status", PaymentAnalyticStatus.class));
            dto.setDate(tuple.get("date", LocalDate.class));
            dto.setPaymentObjects(new HashSet<>());
            return dto;
        });

        // Вложенный уровень: PaymentObjectEntityDto
        String paymentObjectName = tuple.get("paymentObjectName", String.class);
        if (paymentObjectName != null) {
            PaymentAnalyticDto.PaymentObjectEntityDto paymentObjectDto = new PaymentAnalyticDto.PaymentObjectEntityDto();
            paymentObjectDto.setName(paymentObjectName);
            paymentObjectDto.setProjectName(tuple.get("paymentObjectProjectName", String.class));

            // Вложенный уровень: PaymentSsrArticleDto
            String articleCode = tuple.get("articleCode", String.class);
            if (articleCode != null) {
                PaymentAnalyticDto.PaymentObjectSsrEntityDto ssrEntityDto = new PaymentAnalyticDto.PaymentObjectSsrEntityDto();
                PaymentAnalyticDto.PaymentSsrArticleDto articleDto = new PaymentAnalyticDto.PaymentSsrArticleDto();
                articleDto.setCode(articleCode);

                ssrEntityDto.setPaymentSsrArticles(Set.of(articleDto));
                paymentObjectDto.setPaymentObjectSsr(ssrEntityDto);
            }
            analyticDto.getPaymentObjects().add(paymentObjectDto);
        }
    }

    return new ArrayList<>(analyticMap.values());
}
