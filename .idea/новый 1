private Expression<PfLoanFundsRqRegistryItemBo> getProjections(List<RegistryCodes> fields) {
    QPfLoanFundsRqRegistryItemBo qBo = new QPfLoanFundsRqRegistryItemBo(
        paymentAnalyticEntity.id,
        paymentAnalyticEntity.clientId,
        paymentAnalyticEntity.paymentDocumentId,
        fields.contains(RegistryCodes.NUMBER) ? paymentAnalyticEntity.number : null,
        fields.contains(RegistryCodes.STATUS) ? paymentAnalyticEntity.status : null,
        fields.contains(RegistryCodes.DATE) ? paymentAnalyticEntity.date : null,
        fields.contains(RegistryCodes.FUNDS_TYPE) ? paymentAnalyticEntity.fundsType : null,
        fields.contains(RegistryCodes.CREDIT_AGREEMENT_NUMBER) ? paymentAnalyticEntity.creditAgreementNumber : null,
        fields.contains(RegistryCodes.CREDIT_AGREEMENT_DATE) ? paymentAnalyticEntity.creditAgreementDate : null,
        fields.contains(RegistryCodes.PAYER_ACCOUNT) ? paymentAnalyticEntity.payerAccount : null,
        fields.contains(RegistryCodes.OBC_ACCOUNT_FLAG) ? paymentAnalyticEntity.obcAccountFlag : null,
        fields.contains(RegistryCodes.TRANCHE_ISSUE_DATE) ? paymentAnalyticEntity.trancheIssueDate : null,
        fields.contains(RegistryCodes.AMOUNT) ? paymentAnalyticEntity.amount : null,
        fields.contains(RegistryCodes.PAYMENT_PURPOSE) ? paymentAnalyticEntity.paymentPurpose : null,
        fields.contains(RegistryCodes.RECIPIENT_NAME) ? paymentAnalyticEntity.recipientName : null,
        fields.contains(RegistryCodes.RECIPIENT_ACCOUNT) ? paymentAnalyticEntity.recipientAccount : null,
        fields.contains(RegistryCodes.DVRU_NUMBER) ? paymentAnalyticEntity.dvruNumber : null,
        fields.contains(RegistryCodes.DVRU_DATE) ? paymentAnalyticEntity.dvruDate : null,
        fields.contains(RegistryCodes.PAYMENT_TYPE) ? paymentAnalyticEntity.paymentType : null,
        fields.contains(RegistryCodes.PAYMENT_OBJECTS)
            ? Projections.list(
                new QPaymentObjectEntityBo(
                    paymentObjectEntity.name,
                    paymentObjectEntity.projectName,
                    Projections.list(
                        new QPaymentObjectsSsrEntityBo(
                            Projections.list(
                                new QPaymentSsrArticleEntityBo(paymentSsrArticleEntity.code)
                            )
                        )
                    )
                )
            )
            : null
    );

    return qBo;
}


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

private Expression<?>[] getExpressions() {
    List<Expression<?>> projections = new ArrayList<>();
    PathBuilder<?> paymentAnalyticEntity = new PathBuilder<>(PaymentAnalyticEntity.class, "paymentAnalyticEntity");
    PathBuilder<?> paymentObjectEntity = new PathBuilder<>(PaymentObjectEntity.class, "paymentObjectEntity");
    PathBuilder<?> ssrArticleEntity = new PathBuilder<>(PaymentSsrArticleEntity.class, "ssrArticleEntity");

    // Поля основной сущности
    projections.add(paymentAnalyticEntity.get("id", UUID.class).as("id"));
    projections.add(paymentAnalyticEntity.get("clientId", UUID.class).as("clientId"));
    projections.add(paymentAnalyticEntity.get("paymentDocumentId", UUID.class).as("paymentDocumentId"));
    projections.add(paymentAnalyticEntity.get("number", Integer.class).as("number"));
    projections.add(paymentAnalyticEntity.get("status", String.class).as("loanFundsRequestStatus"));
    projections.add(paymentAnalyticEntity.get("date", LocalDate.class).as("date"));
    projections.add(paymentAnalyticEntity.get("fundsType", String.class).as("fundsType"));
    projections.add(paymentAnalyticEntity.get("creditAgreementNumber", String.class).as("creditAgreementNumber"));
    projections.add(paymentAnalyticEntity.get("creditAgreementDate", LocalDate.class).as("creditAgreementDate"));
    projections.add(paymentAnalyticEntity.get("payerAccount", String.class).as("payerAccount"));
    projections.add(paymentAnalyticEntity.get("obcAccountFlag", Boolean.class).as("obcAccountFlag"));
    projections.add(paymentAnalyticEntity.get("trancheIssueDate", LocalDate.class).as("trancheIssueDate"));
    projections.add(paymentAnalyticEntity.get("amount", BigDecimal.class).as("amount"));
    projections.add(paymentAnalyticEntity.get("paymentPurpose", String.class).as("paymentPurpose"));
    projections.add(paymentAnalyticEntity.get("recipientName", String.class).as("recipientName"));
    projections.add(paymentAnalyticEntity.get("recipientAccount", String.class).as("recipientAccount"));
    projections.add(paymentAnalyticEntity.get("dvruNumber", String.class).as("dvruNumber"));
    projections.add(paymentAnalyticEntity.get("dvruDate", LocalDate.class).as("dvruDate"));
    projections.add(paymentAnalyticEntity.get("paymentType", String.class).as("paymentType"));

    // Поля связной сущности ssrArticleEntity
    projections.add(ssrArticleEntity.get("code", String.class).as("code"));

    // Поля связной сущности paymentObjectEntity
    projections.add(paymentObjectEntity.get("name", String.class).as("name"));
    projections.add(paymentObjectEntity.get("projectName", String.class).as("projectName"));

    return projections.toArray(new Expression<?>[0]);
}

import lombok.AllArgsConstructor;
import lombok.Data;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Set;
import java.util.UUID;

@Data
@AllArgsConstructor // Генерирует конструктор для всех полей
public class PFLoanFundsRqRegistryItemDTO {
    private UUID id;
    private UUID clientId;
    private UUID paymentDocumentId;
    private Integer number;
    private String status; // Enum заменён строкой для упрощения, можно оставить Enum, если требуется
    private LocalDate date;
    private String fundsType; // Enum заменён строкой
    private String creditAgreementNumber;
    private LocalDate creditAgreementDate;
    private String payerAccount;
    private Boolean obcAccountFlag;
    private LocalDate trancheIssueDate;
    private BigDecimal amount;
    private String paymentPurpose;
    private String recipientName;
    private String recipientAccount;
    private String dvruNumber;
    private LocalDate dvruDate;
    private String paymentType; // Enum заменён строкой
    private Set<PaymentObjectDTO> paymentObjects;

    @Data
    @AllArgsConstructor
    public static class PaymentObjectDTO {
        private String name;
        private String projectName;
        private PaymentObjectSsrDTO paymentObjectSsr;
    }

    @Data
    @AllArgsConstructor
    public static class PaymentObjectSsrDTO {
        private Set<PaymentSsrArticleDTO> paymentSsrArticles;
    }

    @Data
    @AllArgsConstructor
    public static class PaymentSsrArticleDTO {
        private String code;
    }
}



QPFLoanFundsRqRegistryItemBo qItem = QPFLoanFundsRqRegistryItemBo.pFLoanFundsRqRegistryItemBo;

query.select(Projections.constructor(
        PFLoanFundsRqRegistryItemDTO.class,
        qItem.id,
        qItem.clientId,
        qItem.paymentDocumentId,
        qItem.number,
        qItem.status.stringValue(),
        qItem.date,
        qItem.fundsType.stringValue(),
        qItem.creditAgreementNumber,
        qItem.creditAgreementDate,
        qItem.payerAccount,
        qItem.obcAccountFlag,
        qItem.trancheIssueDate,
        qItem.amount,
        qItem.paymentPurpose,
        qItem.recipientName,
        qItem.recipientAccount,
        qItem.dvruNumber,
        qItem.dvruDate,
        qItem.paymentType.stringValue(),
        Projections.constructor(
                PFLoanFundsRqRegistryItemDTO.PaymentObjectDTO.class,
                qItem.paymentObjects.any().name,
                qItem.paymentObjects.any().projectName,
                Projections.constructor(
                        PFLoanFundsRqRegistryItemDTO.PaymentObjectSsrDTO.class,
                        Projections.list(
                                Projections.constructor(
                                        PFLoanFundsRqRegistryItemDTO.PaymentSsrArticleDTO.class,
                                        qItem.paymentObjects.any().paymentObjectSsr.paymentSsrArticles.any().code
                                )
                        )
                )
        )
));


import com.querydsl.jpa.impl.JPAQuery;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

public Page<YourDTO> findAll(Predicate predicate, List<OrderSpecifier<?>> orders, Pageable pageable) {
    // Инициализация JPAQuery
    JPAQuery<YourDTO> query = new JPAQuery<>(entityManager);

    // Конфигурация запроса
    query.select(Projections.constructor(
            YourDTO.class,
            qEntity.field1,
            qEntity.field2,
            qEntity.nestedField
    ))
    .from(qEntity) // Укажите сущность
    .where(predicate) // Добавьте предикат для фильтрации
    .orderBy(orders.toArray(new OrderSpecifier<?>[0])) // Добавьте сортировку
    .offset(pageable.getOffset()) // Примените смещение для пагинации
    .limit(pageable.getPageSize()); // Примените лимит для пагинации

    // Выполнение запроса и получение данных
    List<YourDTO> content = query.fetch();

    // Подсчёт общего количества записей
    long total = query.fetchCount();

    // Формирование результата в формате Page
    return new PageImpl<>(content, pageable, total);
}

@ExtendWith(MockitoExtension.class)
class PaymentAnalyticServiceTest {

    @Mock
    private PaymentAnalyticRepository paymentAnalyticRepository;

    @InjectMocks
    private PaymentAnalyticService paymentAnalyticService;

    @Test
    void countByStatus_shouldReturnCorrectResultsWithNullCounts() {
        // Исходные данные
        UUID clientId = UUID.randomUUID();
        Set<UUID> organizationIds = Set.of(UUID.randomUUID());
        Set<String> nullCountStatuses = Set.of("REJECTED", "EXECUTED", "DRAFT", "REVOKED");

        // Мок данных для репозитория (Tuple: статус и подсчет)
        List<Tuple> mockedTuples = List.of(
                mockTuple("APPROVAL", 5),
                mockTuple("DRAFT", 3),
                mockTuple("REVOKED", 2),
                mockTuple("IN_TRANCHE", 4),
                mockTuple("REJECTED", 1),
                mockTuple("EXECUTED", 0)
        );

        // Подготовка мока репозитория
        when(paymentAnalyticRepository.countByPredicate(any(), any(), any()))
                .thenReturn(mockedTuples);

        // Ожидаемые данные (DTO, которые должны быть получены после преобразования)
        List<StatusCountDto> expectedDtos = List.of(
                new StatusCountDto("APPROVAL", 5),
                new StatusCountDto("IN_TRANCHE", 4),
                new StatusCountDto("REJECTED", null),
                new StatusCountDto("DRAFT", null),
                new StatusCountDto("REVOKED", null),
                new StatusCountDto("EXECUTED", null)
        );

        // Вызов метода
        List<StatusCountDto> result = paymentAnalyticService.countByStatus(clientId, organizationIds);

        // Проверка результата
        assertNotNull(result, "Результат не должен быть null");
        assertEquals(expectedDtos.size(), result.size(), "Размер результата должен совпадать с ожидаемым");

        for (int i = 0; i < result.size(); i++) {
            StatusCountDto actualDto = result.get(i);
            StatusCountDto expectedDto = expectedDtos.get(i);

            // Проверка, что статус соответствует
            assertEquals(expectedDto.getStatus(), actualDto.getStatus(), "Статус должен совпадать");

            // Проверка, что count соответствует
            if (expectedDto.getCount() == null) {
                assertNull(actualDto.getCount(), "Count должен быть null для статуса " + actualDto.getStatus());
            } else {
                assertEquals(expectedDto.getCount(), actualDto.getCount(), "Count должен совпадать для статуса " + actualDto.getStatus());
            }
        }
    }

    // Хелпер для мокирования Tuple
    private Tuple mockTuple(String status, int count) {
        Tuple tuple = mock(Tuple.class);
        when(tuple.get(paymentAnalyticEntity.status)).thenReturn(status);
        when(tuple.get(paymentAnalyticEntity.id.count())).thenReturn(count);
        return tuple;
    }
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Метод формирования проекций
private Expression<PfLoanFundsRqRegistryItemBo> getProjections(List<RegistryCodes> fields) {
    // Собираем обязательные поля
    List<Expression<?>> projections = new ArrayList<>(getMandatoryFields());

    // Добавляем опциональные поля из fields[]
    if (fields != null && !fields.isEmpty()) {
        projections.addAll(getOptionalFields(fields));
    } else {
        // Если fields пуст, добавляем все доступные опциональные поля
        projections.addAll(getAllOptionalFields());
    }

    return Projections.constructor(PfLoanFundsRqRegistryItemBo.class, projections.toArray(new Expression<?>[0]));
}

// Обязательные поля (всегда включены)
private List<Expression<?>> getMandatoryFields() {
    return List.of(
        paymentAnalyticEntity.id,
        paymentAnalyticEntity.clientId,
        paymentAnalyticEntity.paymentDocumentId
    );
}

// Опциональные поля, указанные в fields[]
private List<Expression<?>> getOptionalFields(List<RegistryCodes> fields) {
    Map<RegistryCodes, Expression<?>> fieldMapping = getFieldMapping();
    return fields.stream()
                 .map(fieldMapping::get)
                 .filter(Objects::nonNull) // Игнорируем неизвестные поля
                 .collect(Collectors.toList());
}

// Все опциональные поля (если fields пуст)
private List<Expression<?>> getAllOptionalFields() {
    return new ArrayList<>(getFieldMapping().values());
}

// Карта соответствий RegistryCodes -> Поля
private Map<RegistryCodes, Expression<?>> getFieldMapping() {
    Map<RegistryCodes, Expression<?>> fieldMapping = new HashMap<>();
    fieldMapping.put(RegistryCodes.NUMBER, paymentAnalyticEntity.number);
    fieldMapping.put(RegistryCodes.STATUS, paymentAnalyticEntity.status);
    fieldMapping.put(RegistryCodes.DATE, paymentAnalyticEntity.date);
    fieldMapping.put(RegistryCodes.FUNDS_TYPE, paymentAnalyticEntity.fundsType);
    fieldMapping.put(RegistryCodes.CREDIT_AGREEMENT_NUMBER, paymentAnalyticEntity.creditAgreementNumber);
    fieldMapping.put(RegistryCodes.CREDIT_AGREEMENT_DATE, paymentAnalyticEntity.creditAgreementDate);
    fieldMapping.put(RegistryCodes.PAYER_ACCOUNT, paymentAnalyticEntity.payerAccount);
    fieldMapping.put(RegistryCodes.OBC_ACCOUNT_FLAG, paymentAnalyticEntity.obcAccountFlag);
    fieldMapping.put(RegistryCodes.TRANCHE_ISSUE_DATE, paymentAnalyticEntity.trancheIssueDate);
    fieldMapping.put(RegistryCodes.AMOUNT, paymentAnalyticEntity.amount);
    fieldMapping.put(RegistryCodes.PAYMENT_PURPOSE, paymentAnalyticEntity.paymentPurpose);
    fieldMapping.put(RegistryCodes.RECIPIENT_NAME, paymentAnalyticEntity.recipientName);
    fieldMapping.put(RegistryCodes.RECIPIENT_ACCOUNT, paymentAnalyticEntity.recipientAccount);
    fieldMapping.put(RegistryCodes.DVRU_NUMBER, paymentAnalyticEntity.dvruNumber);
    fieldMapping.put(RegistryCodes.DVRU_DATE, paymentAnalyticEntity.dvruDate);
    fieldMapping.put(RegistryCodes.PAYMENT_TYPE, paymentAnalyticEntity.paymentType);

    // Вложенные поля
    fieldMapping.put(RegistryCodes.PAYMENT_OBJECTS, getNestedProjections());
    return fieldMapping;
}

// Вложенные проекции (например, для PaymentObjects)
private Expression<?> getNestedProjections() {
    return Projections.list(
        Projections.constructor(PaymentObjectEntityBo.class,
            paymentObjectEntity.name,
            paymentObjectEntity.projectName,
            Projections.constructor(PaymentObjectsSsrEntityBo.class,
                Projections.list(
                    Projections.constructor(PaymentSsrArticleEntityBo.class,
                        paymentSsrArticleEntity.code
                    )
                )
            )
        )
    );
}


