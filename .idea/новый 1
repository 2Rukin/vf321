private Expression<?>[] getExpressions() {
    List<Expression<?>> projections = new ArrayList<>();
    PathBuilder<?> paymentAnalyticEntity = new PathBuilder<>(PaymentAnalyticEntity.class, "paymentAnalyticEntity");
    PathBuilder<?> paymentObjectEntity = new PathBuilder<>(PaymentObjectEntity.class, "paymentObjectEntity");
    PathBuilder<?> ssrArticleEntity = new PathBuilder<>(PaymentSsrArticleEntity.class, "ssrArticleEntity");

    // Поля основной сущности
    projections.add(paymentAnalyticEntity.get("id", UUID.class).as("id"));
    projections.add(paymentAnalyticEntity.get("clientId", UUID.class).as("clientId"));
    projections.add(paymentAnalyticEntity.get("paymentDocumentId", UUID.class).as("paymentDocumentId"));
    projections.add(paymentAnalyticEntity.get("number", Integer.class).as("number"));
    projections.add(paymentAnalyticEntity.get("status", String.class).as("loanFundsRequestStatus"));
    projections.add(paymentAnalyticEntity.get("date", LocalDate.class).as("date"));
    projections.add(paymentAnalyticEntity.get("fundsType", String.class).as("fundsType"));
    projections.add(paymentAnalyticEntity.get("creditAgreementNumber", String.class).as("creditAgreementNumber"));
    projections.add(paymentAnalyticEntity.get("creditAgreementDate", LocalDate.class).as("creditAgreementDate"));
    projections.add(paymentAnalyticEntity.get("payerAccount", String.class).as("payerAccount"));
    projections.add(paymentAnalyticEntity.get("obcAccountFlag", Boolean.class).as("obcAccountFlag"));
    projections.add(paymentAnalyticEntity.get("trancheIssueDate", LocalDate.class).as("trancheIssueDate"));
    projections.add(paymentAnalyticEntity.get("amount", BigDecimal.class).as("amount"));
    projections.add(paymentAnalyticEntity.get("paymentPurpose", String.class).as("paymentPurpose"));
    projections.add(paymentAnalyticEntity.get("recipientName", String.class).as("recipientName"));
    projections.add(paymentAnalyticEntity.get("recipientAccount", String.class).as("recipientAccount"));
    projections.add(paymentAnalyticEntity.get("dvruNumber", String.class).as("dvruNumber"));
    projections.add(paymentAnalyticEntity.get("dvruDate", LocalDate.class).as("dvruDate"));
    projections.add(paymentAnalyticEntity.get("paymentType", String.class).as("paymentType"));

    // Поля связной сущности ssrArticleEntity
    projections.add(ssrArticleEntity.get("code", String.class).as("code"));

    // Поля связной сущности paymentObjectEntity
    projections.add(paymentObjectEntity.get("name", String.class).as("name"));
    projections.add(paymentObjectEntity.get("projectName", String.class).as("projectName"));

    return projections.toArray(new Expression<?>[0]);
}
