public static <E, T> Expression<?>[] mapFieldsToProjections(Class<E> entityClass, Class<T> dtoClass) {
    List<Expression<?>> projections = new ArrayList<>();
    PathBuilder<E> entityPath = new PathBuilder<>(entityClass, "paymentAnalyticEntity");

    for (Method method : dtoClass.getDeclaredMethods()) {
        String methodName = method.getName();
        if (methodName.startsWith("get")) {
            String fieldName = Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);
            try {
                Class<?> dtoFieldType = method.getReturnType();
                if (isDtoClass(dtoFieldType)) { 
                    // Если поле — вложенный DTO, обрабатываем его рекурсивно
                    Field entityField = entityClass.getDeclaredField(fieldName);
                    PathBuilder<?> relatedPath = entityPath.get(entityField.getName());
                    projections.addAll(Arrays.asList(
                        mapFieldsToProjections(relatedPath.getType(), dtoFieldType)
                    ));
                } else {
                    // Простое поле
                    Field entityField = entityClass.getDeclaredField(fieldName);
                    Class<?> entityFieldType = entityField.getType();

                    if (!dtoFieldType.equals(entityFieldType)) {
                        throw new IllegalArgumentException(String.format(
                            "Тип поля '%s' в сущности %s (%s) не совпадает с типом поля в %s (%s)",
                            fieldName, entityClass.getSimpleName(), entityFieldType.getSimpleName(),
                            dtoClass.getSimpleName(), dtoFieldType.getSimpleName()
                        ));
                    }

                    SimpleExpression<?> fieldExpression = entityPath.get(entityFieldType, fieldName);
                    projections.add(fieldExpression.as(fieldName));
                }
            } catch (NoSuchFieldException e) {
                throw new RuntimeException(String.format(
                    "В сущности %s отсутствует поле %s",
                    entityClass.getSimpleName(), fieldName
                ), e);
            } catch (IllegalArgumentException e) {
                throw new EntityNotFoundException(String.format(
                    "В QEntity класса %s не найдено поле %s для ResponseDto класса %s или не совпадают типы полей: %s",
                    entityClass.getSimpleName(), fieldName, dtoClass.getSimpleName(), methodName), e);
            }
        }
    }

    return projections.toArray(new Expression<?>[0]);
}

private static boolean isDtoClass(Class<?> clazz) {
    // Условие, определяющее, является ли класс DTO (можно доработать)
    return !clazz.isPrimitive() && !clazz.getName().startsWith("java.");
}
